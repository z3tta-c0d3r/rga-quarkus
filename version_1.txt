package org.rga.controller;

import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.web.client.WebClient;
import org.rga.domain.request.UserDomain;
import org.rga.domain.response.UserResponseDomain;
import org.rga.entity.MasUser;
import org.rga.mapper.UserMapper;
import org.rga.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.PathParam;

@Path("/orchestrator")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class OrchestratorController {
    private static final Logger LOGGER = LoggerFactory.getLogger(OrchestratorController.class);

    @Inject
    UserService userService;

    @Inject
    Vertx vertx;


    private WebClient client;

//    @PostConstruct
//    void initialize() {
//        this.client = WebClient.create(vertx,
//                new WebClientOptions().setDefaultHost("management.azure.com").setDefaultPort(443).
//                        setSsl(true).setTrustAll(true));
//    } /providers/Microsoft.ResourceHealth/operations

//    @PostConstruct
//    void initialize() {
//    this.client = WebClient.create(vertx,
//            new WebClientOptions().setDefaultHost("run.mocky.io").setDefaultPort(443).
//                    setSsl(true).setTrustAll(true));
//    } ok --> /v3/a8d9cf86-5910-4511-ab17-68f33f436b3e

    @PostConstruct
    void initialize() {
        this.client = WebClient.create(vertx,
                new WebClientOptions().setDefaultHost("run.mocky.io").setDefaultPort(443).
                        setSsl(true).setTrustAll(true));
    }

    @GET
    @Path("/{id}")
    public Uni<Response> getUserById(@PathParam("id") int id) {
         return userService.findUserById(id).onItem()
                    .transform(user -> user != null ? Response.ok(user) : Response.status(Response.Status.NOT_FOUND))
                    .onItem().transform(Response.ResponseBuilder::build);
    }

//    @GET
//    @Path("/vertx/{id}")
//    public Uni<JsonObject> getUserByIdById(@PathParam("id") int id) {
//        Uni<JsonObject> uni =
//                client.get("/v3/a8d9cf86-5910-4511-ab17-68f33f436b3e")
//                        .send()
//                        .onItem().apply(resp -> {
//                    if (resp.statusCode() == 200) {
//                        return resp.bodyAsJsonObject();
//                    } else {
//                        return new JsonObject()
//                                .put("code", resp.statusCode())
//                                .put("message", resp.bodyAsString());
//                    }
//                });
//        return uni;
//    }

    @POST
    public Response orchestrator(UserDomain userDomain) {
        // Recuperamos los datos del dominio de entrada
        MasUser userEntity = UserMapper.INSTANCE.UserDomainToUserEntity(userDomain);

        // Llamamos al servicio documental para obtener la informacion datos de entrada
        //   1.1.- Si existe el usuario en el gestor documental recuperamos los datos
        //   e ir a TWILIO
        Boolean servicioDocumental = false;
        if(servicioDocumental) {
            // vamos a TWILIO
            // postTwilio
        } else {
            //   1.2.- Si no existe el usuario en el gestor documental dar de alta el usuario
            //   en DDBB e ir a TWILIO
            // Dar de alta el usuario
            userService.add(userEntity);

            // vamos a twilio
            // postTwilio
        }

        // Devolvemos la respuesta del usuario con el proceso indicado
        UserResponseDomain userResponse = UserMapper.INSTANCE.UserEntityToUserDomain(userEntity);
        return Response.ok(userResponse).build();
    }

//    @POST
//    public Response postTwilio(UserDomain userDomain) {
//        return Response.ok().build();
//    }
    @POST
    @Path("/twilio/{id}")
    public Uni<JsonObject>  postTwilio(UserDomain userDomain) {
        Uni<JsonObject> uni =
            client.get("/v3/a8d9cf86-5910-4511-ab17-68f33f436b3e")
                    .send()
                    .onItem().apply(resp -> {
                if (resp.statusCode() == 200) {
                    return resp.bodyAsJsonObject();
                } else {
                    return new JsonObject()
                            .put("code", resp.statusCode())
                            .put("message", resp.bodyAsString());
                }
            });
        return uni;
    }

    @POST
    public Response postBatch(UserDomain userDomain) {
        return Response.ok().build();
    }
}
